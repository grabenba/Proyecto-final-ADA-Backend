## WINSTONJS

WinstonJS es una biblioteca de registro (logging) para Node.js. Su función principal es facilitar la implementación 
y configuración de registros en aplicaciones Node.js, permitiendo a los desarrolladores registrar información 
relevante sobre el comportamiento y el estado de la aplicación durante la ejecución. 

WinstonJS es ampliamente utilizado en entornos Node.js para la gestión de registros debido a su flexibilidad y características.

Características y usos principales de WinstonJS:

1. **Múltiples Transportes:** WinstonJS permite el uso de múltiples "transportes" para los registros. Un "transporte" 
es un destino para los registros, como la consola, archivos de registro, bases de datos, servicios de terceros, etc. 
Esto brinda flexibilidad para dirigir los registros a diferentes destinos según las necesidades de la aplicación.

2. **Niveles de Registro:** Los registros pueden tener diferentes niveles de importancia, como "info", "warn", "error", etc. 
WinstonJS proporciona un sistema de niveles que permite filtrar y controlar qué registros se deben registrar en función de 
su importancia.

3. **Formato Personalizado:** Los registros pueden formatearse de manera personalizada. WinstonJS permite especificar 
el formato en el que se deben presentar los registros, lo que facilita la adaptación a las necesidades específicas 
del desarrollador o de la aplicación.

4. **Manejo de Excepciones:** WinstonJS puede integrarse con el sistema de manejo de excepciones de Node.js, permitiendo 
registrar automáticamente las excepciones no manejadas.

5. **Configuración Flexible:** WinstonJS es altamente configurable, lo que significa que los desarrolladores pueden ajustar 
fácilmente la configuración de registro según sus necesidades, como cambiar los niveles de registro permitidos, 
configurar diferentes transportes, etc.

Un ejemplo básico de cómo usar WinstonJS en una aplicación Node.js sería algo así:

```javascript
const winston = require('winston');

// Configuración básica
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.simple(),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logfile.log' })
  ]
});

// Uso del logger
logger.info('Este es un mensaje de información');
logger.warn('Esto es una advertencia');
logger.error('Ocurrió un error');
```
Este es solo un ejemplo simple, y WinstonJS ofrece muchas más características y opciones para la gestión 
de registros en aplicaciones Node.js.
En esta aplicación se configura un logger con dos transportes: uno para la consola y otro para un archivo de registro. 
Se pueden agregar más transportes según sea necesario. 
